// Window.java

import java.awt.Container;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JFrame;

public class Window extends JFrame {
	private static final long serialVersionUID = 5259700796854880162L;
	private static Display canvas;
	private boolean running;
	
	public Window() throws InterruptedException {
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setTitle("Brick Breaker");
		//setSize(600, 400); 
		setExtendedState(JFrame.MAXIMIZED_BOTH);
		setVisible(true);
		Thread.sleep(1000);
		
		addKeyListener(new FrameKeyListener());
		addWindowListener(new FrameWindowListener());
		//addMouseListener(new FrameMouseListener());
	}
	
	public void run() {
		boolean restart = true;
		while (restart) {
			//System.out.println("restarting");
			Container container = getContentPane();
			canvas = new Display(container.getWidth(), container.getHeight());
			add(canvas);
			Program.restart();
			
			canvas.setup();
			running = true;
			restart = false;
		    while (running) {
		    	canvas.draw();
		    	if (InputController.isHigh(InputController.getSelect())) {
		    		restart = true;
		    		running = false;
		    		//System.out.print("Preparing to restart\t");
		    	}
		    }
		    
		    remove(canvas);
		    try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	private class FrameKeyListener implements KeyListener {
		public void keyTyped(KeyEvent e) {}
		
		public void keyPressed(KeyEvent e) {
			InputController.addButton(e.getKeyCode());
		}
		
		public void keyReleased(KeyEvent e) {
			InputController.removeButton(e.getKeyCode());
		}
	}
	
	private class FrameWindowListener implements WindowListener {
		public void windowOpened(WindowEvent e) {}
		public void windowClosing(WindowEvent e) {
			running = false;
			canvas.getGraphics().dispose();
		}
		public void windowClosed(WindowEvent e) {}
		public void windowIconified(WindowEvent e) {}
		public void windowDeiconified(WindowEvent e) {}
		public void windowActivated(WindowEvent e) {}
		public void windowDeactivated(WindowEvent e) {}
	}

	public Display getCanvas() {
		return canvas;
	}
}
